apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "com.example.cryptomanager_v2"
        minSdkVersion 16
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    dataBinding {
        enabled = true
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

kapt {
    correctErrorTypes = true
}

dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'

    // Optional -- Robolectric environment
    testImplementation 'androidx.test:core:1.2.0'
    // Optional -- Mockito framework
    testImplementation 'org.mockito:mockito-core:3.1.0'
    testImplementation 'org.mockito:mockito-inline:3.1.0'

    testImplementation 'org.assertj:assertj-core:3.14.0'

    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"

    testImplementation "org.hamcrest:hamcrest-library:1.3"

    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"

    testImplementation "android.arch.core:core-testing:1.1.1"

    testImplementation 'com.squareup.assertj:assertj-android:1.2.0'

    implementation 'com.google.guava:guava:24.1-jre'

    /* assertThat */
    testCompile("org.assertj:assertj-core:3.11.1")

    /* Adds json for testing */
    testCompile("org.json:json:20140107")

    /* dagger */
    def dagger_version = "2.24"
    implementation "com.google.dagger:dagger:$dagger_version"
    implementation "com.google.dagger:dagger-android:$dagger_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version"
    // if you use the support libraries
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    kapt 'com.google.dagger:dagger-android-processor:2.20'

    /* rxjava */
    def rxjava_version = "2.1.1"
    implementation "io.reactivex.rxjava2:rxandroid:$rxjava_version"

    /* Android Support Library: CardView  */
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.cardview:cardview:1.0.0'

    /* Retrofit using RxJava2, Okhttp, Okhttp logging interceptor, Gson  */
    def retrofit_version = "2.6.2"
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit_version"
    implementation 'com.squareup.okhttp3:logging-interceptor:4.2.2'

    /* Glide */
    def glide_version = "4.10.0"
    implementation "com.github.bumptech.glide:glide:$glide_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"

    /* Epoxy */
    def epoxy_version = "3.8.0"
    implementation "com.airbnb.android:epoxy:$epoxy_version"
    kapt "com.airbnb.android:epoxy-processor:$epoxy_version"

    /* Constraint Layout */
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'

    /* LiveData & ViewModel */
    implementation 'android.arch.lifecycle:extensions:1.1.1'

    /* Data binding */
    kapt "com.android.databinding:compiler:3.1.4"

    /* Room database */
    def room_version = "2.2.1"
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-rxjava2:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    /* RxKotlin */
    def rxkotlin_version = "2.4.0"
    implementation("io.reactivex.rxjava2:rxkotlin:$rxkotlin_version")

    /* retrofit addition - allows to return data as a string instead of a gson object */
    implementation("com.squareup.retrofit2:converter-scalars:$retrofit_version")

    /* MvRx */
    implementation 'com.airbnb.android:mvrx:1.3.0'

    /* Assisted Inject */
    compileOnly 'com.squareup.inject:assisted-inject-annotations:0.5.1'
    kapt 'com.squareup.inject:assisted-inject-processor:0.5.1'
    compileOnly 'com.squareup.inject:assisted-inject-annotations-dagger2:0.5.1'
    kapt 'com.squareup.inject:assisted-inject-processor-dagger2:0.5.1'
}
